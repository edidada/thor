好，今天，我想更多地讨论一些
关于容错和复制的问题
然后深入研究
话题回到容错上来
容错以提供高可用性————
例如：当你想构建一个服务器时
提供服务的硬件总是有崩溃的可能
但是
我们还是希望能稳定地提供服务
甚至，我们想（并且可以）在即使出现了网络问题的时候
依旧提供我们的服务————
我们所使用到的工具就是“复制”
至少在本课程的这一部分是这样
一个很有价值的问题：
复制能处理什么样的“失败”呢？
因为这无论如何都不是一件小事
使用最简单的方法来描述一下
我们所能处理的那种“失败”————
其实是一种通用的术语
容错就是说如果有一些东西出了故障
比如说一台计算机出了什么问题
它就会简单地停止运行
如果任何东西出了什么故障的话
尤其需要注意的是：它不会计算出不正确的结果
所以，如果有人断了你的电源
把电源线从你的服务器上拔了出来
类似地，如果他们拔了你的服务器的网络插头
尽管你知道服务器仍在运行
所以这就有点可笑
因为对于网络另一头的我来说
服务器断了网就和停止运行没啥两样
所以这些错误是我们可以处理的错误
复制能处理的问题也包括一些硬件问题
比如
你的服务器的风扇坏了
可能因为太便宜了，哈哈
干净利落
我们所讨论的这种复制系统
也有一些它不能处理的问题
比如软件问题、软件漏洞
或者一些更基本的、不是软件漏洞的硬件设计缺陷
如果我们接受一些服务
我们复制运行它
我们在两台计算机上复制运行它
那么复制对我们没有任何帮助
我们还是会得到计算错误的结果
并且从表面上看一切都好好的
它们会默默允许让你碰上一个错误答案
所以
我们不能依赖于复制软件中的漏洞
并且
我们管理复制的方案中的漏洞也是不可防御的
和我刚才提到的类似
我们不能期望处理硬件中的漏洞
这个硬件呢
它会计算出不正确的结果
事情也就这样了
至少对于这种技术来说，也就如此了
尽管肯定有一些硬件和软件漏洞
是复制能解决的
如果你足够幸运的话
如果
有一些不相关的软件运行在你的服务器上
它使你的服务器崩溃了
或者什么也不做
对你正复制的服务什么也不做
那么
这种错误对于我们的服务来说
并且备份复制会取而代之
有一些种类的硬件错误
例如：如果你通过网络发送了一个包
但是网络损坏了这个包，它翻转了一个比特位
像这种情况
几乎肯定可以通过校验和而检测出来
一个磁盘块也是一样的
如果你往磁盘上写了一些数据
然后一个月后又把它读出来
也许磁表面不是很完美
在这个块上，最重要的那几个比特位是错的
但是它能被正确地读出来
这实际上是纠错功能
能在一定程度上
修复磁盘块中地错误
这样的话
一些随机的硬件错误可以被纠正
如果你超级幸运的话
或者至少可以检测到错误
从而让软件知道
知道发生了错误
即时地停止运行或者采取一些其他的补救措施
但是，一般来说
复制还有一些其他的限制
啊，其他限制
不管失败发生在主要的那个复制中
还是发生在备份的那个复制中或者其他怎样
我们总是假设
两个复制中的失败是相互独立的
如果两个复制中总是有相关联的失败
那么，复制将对我们没有帮助
例如，如果我们有一整套设备
我们买了成千上万的计算机
啊，成千上万台计算机
同一家厂商生产的成千上万的相同的计算机
我们把我们的复制运行在上面
我们一次在同一个地方买那么多电脑
这可有一点风险
啊，有点风险
因为很可能
其中一个有了缺陷
其他的也有相同的缺陷
比如说
由于制造商没有设计好散热系统
导致其中的一个过热了
那么很有可能这一批货都有这个问题
所以如果其中一个过热、宕机了
那么其他的也很有可能同样宕机
这是相关失败的一种
你要小心的是另一种
比如说
地震了
地震正好发生在存储着我们的数据的数据中心所在的城市
在这种情况下
无论我们在那个数据中心里弄多少复制
也无济于事
因为这种失败
这种由地震、全市停电引起的失败
或者建筑失火这种
它是相关失败
同一建筑内的复制之间的相关失败
所以如果我们想处理地震带来的问题
那么
我们需要把我们的复制放在不同的城市
至少把它们在物理上足够分隔开
让它们分别供电
这样它们就不会被同一自然灾害所影响了
对，不会
好了，这就是全部种类的不稳定性了
至少在我们这次讨论的背景下
我们所讨论的正是你可能会使用的技术
还有一个关于复制的问题
你可能会问你自己
天呐
对了
我们就得买三倍容量的磁盘
啊，今天的那篇论文呢
只复制了一次
这些东西都是很昂贵的
这真的很值得吗
并且
这不是一个我们能从技术上回答正确的问题
这是一个经济上的问题
这个问题取决于获取一个可用的服务的价值
这个问题取决于获取一个可用的服务的价值
比如说你在运行一个银行服务
计算机宕机的后果就是
你不能服务你的顾客了
你也就不能获得收入了
你的顾客们也会恨你
权衡之下，多花一两万在一台备份计算机上很可能是值得的
权衡之下，多花一两万在一台备份计算机上很可能是值得的
所以，你可以复制一份
因为运行失败所造成的后果没什么大不了的
复制是否值得？
该复制多少份？
这都取决于
你愿意花费多少在这上面
取决于当失败发生时会给你带来多大的损失和不便
好了
开头提到的这篇论文
介绍了几种不同的复制方法
啊，其实介绍了两种
在这个班上呢
我们主要讨论复制状态机
我们主要讨论复制状态机
但我们也会讨论状态转移的
状态转移背后的思想是
如果我们有一个服务器的两份复制
你让它们保持同步的方式就是
让它们成为实际上的复制
使备份拥有它需要的一切
以便当主机宕机时备份能够接管
在一个状态转移模式中
它工作的方式就是，主机发送一份整个自身状态的拷贝
比如
它内存的内容，把它发送给备份
备份只是存储最新的状态
这样，备份就有全部的主机状态
主机如果宕机了的话
备份就可以开始运行在最新状态
如果主机宕机了的话
所以这完全就是发送主机的状态
今天
如果今天的论文以一个状态转移系统来运行的话
其实并不是
主机的内存里的内容
所以
可能每次主机复制了一大份拷贝
一大份自身内存的拷贝并且发送的时候
需要通过网络发送给备份
确定性的操作
每条指令做的是
而且只有当外部事件干预时，才可能发生意外情况
像是某个随机时间到达的数据包
导致服务器开始做些不一样的事
复制的状态机方案不会在副本之间发送状态
相反，他们只是发送这些外部事件
相反，他们只是发送这些外部事件
观察结果是
如果有两台计算机
并且它们从相同的状态开始
并且它们以相同的顺序或相同的时间看到相同的输入
并且它们以相同的顺序或相同的时间看到相同的输入
则两台计算机将继续互为彼此的复制
这可能转移了内存
在于通常操作要比状态小
在于通常操作要比状态小
服务器的状态，如果是数据库服务器
可能是整个数据库
可能是千兆字节
而操作只是一些客户端发送的
操作通常很小
状态通常很大
因此复制状态机通常看起来很吸引人
轻微的缺点是这些方案往往要复杂得多
轻微的缺点是这些方案往往要复杂得多
并且依赖于计算机运行方式的更多假设
并且依赖于计算机运行方式的更多假设
关于这些策略，有什么问题吗
但是因为
备份没有向任何人发出租约
甚至没有意识到有人请求租约
认为它持有某些块的租约
那只是一个接近家庭的例子
我认为你可以构造任何坏的情况
想象某些服务会因为状态不同，导致计算出错误答案
想象某些服务会因为状态不同，导致计算出错误答案
是的，哦，你们都在谈论这个
我待会儿再说
是的
如果它们的寄存器和存储器都相同
但是在某些指令中
比如一条获取当前时间的指令可以
可能会在略有不同的时间执行
可能会在略有不同的时间执行
这些问题的统一的答案
但是在执行该指令的地方
告诉它正确的答案是什么
你可能已经注意到
而且还不清楚如何将其扩展到多核机器
而且还不清楚如何将其扩展到多核机器
在多核机器中
两个核的指令的交织是不确定的
两个核的指令的交织是不确定的
两个核的指令的交织是不确定的
因此，我们不再在多核计算机上出现这种情况
因为如果让主数据库和备份计算机执行，
其他条件都相同，
那么它们将是相同的
那么它们将是相同的
内存映像只是机器的状态而已
并行性并不影响
并行性并不影响
而复制状态机方案确实存在并行性问题
好的，如果我们要构建一个复制状态机方案
好的，如果我们要构建一个复制状态机方案
我们需要决定要在什么级别上复制状态
我们需要决定要在什么级别上复制状态
我们所说的状态是什么
因此，很多设计
必须有一些切换方案
切换几乎可以肯定
几乎不可能设计一个
不会出现任何异常现象的切入系统
在这种理想的世界中
我们必须找出一种应对它们的方法
我们必须找出一种应对它们的方法
我们真的需要一个新的复制
因此，我们绝对需要使新复制尽快上线
那可能很昂贵
但是我们喜欢复制状态机的原因是
因为我们认为状态转移会很昂贵
因为我们认为状态转移会很昂贵
但复制状态机中的两个复制仍需要具有完整状态
我们只是有一种便宜的方法来使它们保持同步
如果我们需要创建新复制的话
实际上我们别无选择
人们通常会花费很多
实际上人们花很多时间担心所有这些问题
实际上人们花很多时间担心所有这些问题
我们在查看其他复制状态机方案时会再次看到它们
它复制了机器的完整状态
即所有内存和所有机器寄存器
即所有内存和所有机器寄存器
我猜他们没有一个简单的方法
可以使这种设计应用于多核虚拟机
好的，这些是
他们没有说清楚
但我猜想日志条目中要有三样东西
（一是）事件发生时的指令号
因为如果您要传送中断或输入，或别的
因为如果您要传送中断或输入，或别的
所以我们需要知道
指令序号
指令序号的意思是
而不是指令地址
对于中断和输入
这个序号是
网络输入，或者怪异指令
如果是有数据包到达，
这样备份虚拟机就可以伪造指令
然后提供相同的结果
好的
假定要求硬件
这里是仿真的硬件，虚拟机
并产生中断给操作系统
这就是操作系统通过
因此
因此计时器必须
否则他们不会执行相同的，并且分歧
否则他们不会执行相同的，并且分歧
实际情况是
物理机器上的计时器计时并发出中断
物理机上的计时器计时并发出中断
记下自启动以来的指令序号
记下自启动以来的指令序号
然后以该指令编号将伪造的模拟和中断
然后以该指令编号将伪造的模拟和中断
你仿真的计时器硬件刚刚滴答了
有中断
然后
并没有给提供
然后用伪造的计时器中断
现在的指令号与主指令上的指令号完全相同
是的，这个观察是
恰好在一千条指令之后
这是特殊的硬件
而且
它还有很多其他用途，例如
如果您想进行性能分析
这里用的是相同的硬件
我们知道
但是备份已经执行了第一百万零一条指令
但是备份已经执行了第一百万零一条指令
但是备份已经执行了第一百万零一条指令
如果我们允许这种情况发生
就来不及将中断放在
所以我们不能让这种情况发生
实际上维护一个缓冲区
除非该缓冲区中至少有一个事件
即下一个停止的指令序号
如果由于某种原因而变慢
通常地，当一个
网络接口卡会
当数据从网络接口卡到达时
但有可能，计算机上运行的操作系统
但可能是计算机上运行的操作系统
可能会看到包中的数据
我们不知道运行的是什么操作系统
可能有一个操作系统
可能有一个操作系统
当它们被复制到内存中时，观察到内存中到达的数据包
当它们被复制到内存中时，观察到内存中到达的数据包
所以我们不能让这种情况发生
如果在主节点用的是这种方式
它就会观察到
我们没办法精确控制网卡将数据复制到内存的时间点
这就意味着网卡复制包进虚拟机监视器的虚拟内存
然后打断虚拟机监视器告诉它有抵达的包
这时虚拟机监视器就会中断主节点
记住当前位置的指令号
然后模拟主节点的网卡中断
然后发送包和中断位置的指令号到副节点
副节点也会中断
副节点也会在同样的指令号位置中断
然后模拟副节点在同样指令号位置中断
这就是论文中描述的回弹缓冲机制
一般是在主节点和副节点执行结果会不同的指令
或者获取已执行的指令数量
这些相对来说都是很少见的
或者说像生成随机数
让硬件生成用于加密的随机数之类的
这些都不是日常的指令
大多数指令例如相加的指令会在主副节点有相同的结果
只有少部分是因为会产生不确定结果的指令造成
基本就是各个客户端发的包
所以我们就能估算出记录通道需要有怎样的性能
输出是如何工作的也值得讲一下
没有其他形式的输出了
主节点和副节点计算他们要发送的数据包
在主节点上真正进行发送
副节点的包则被简单地丢弃掉
真实的情况会稍微复杂一点
假设我们在跑的是一个简单的数据库服务器
假设在主节点一切都正常
本地网络的客户端发送自增请求到主节点
这个网络包被发到主节点
然后被主节点的程序执行
然而你也要想一下如果在不恰当的时间服务出现失败会怎么样
上这门课的期间你要一直这样问自己
假设主节点确实生成了返回给客户端的回复
但是主节点在发送完回复之后就宕机了
再假设记录通道也在主节点宕机的时候失效了
那这个或者其他客户端发送自增请求到原来的副节点
当收到请求的时候这个接管工作的副节点开始处理
回复给原来的客户端或者不同的客户端
因为我们需要支撑的程序在没改动的情况下
并不能处理这些副节点上不寻常的问题
意思是我们不能对它进行修改
比如说我们可以
把客户端改成能处理
副节点容错性带来的问题
但是实际上我们没有这种选择
因为这个系统只有在我们不需要客户端进行改动的情况下才有意义
所以这是个灾难
我们不能让它发生
有人记得论文上是怎么样防止它发生的吗？
没错解决的方案就是控制输出规则
方案就是阻止输出
在主节点上不允许生成任何输出
比如我们现在说的这个计数器输出
直到副节点确认收到了所有的记录
当输入到来时
虚拟机监视器发送输入的副本到副节点
这个输入的日志信息
在主节点产生输出前发到副节点
发送之后这个日志就在去往副节点的网络中
这个日志有可能丢失
直到之前的日志记录都被副节点确认
这是最近的一条日志消息
所以输出都被虚拟机监视器截停
直到这条包含客户端输入的日志
被虚拟机监视器投递和缓冲
但是不一定马上会执行
可能需要等待副节点执行到指令流中对应的位置
当确认消息抵达时
虚拟机监视器才会将包发送到网络中
因此我们不在会有以下的异常
副节点完全没有接到过相关内容
比如说有些情况消息可能会中途丢失
日志记录丢失后主节点宕机
如果主节点宕机
日志记录随主节点宕机丢失
它肯定在虚拟机监视器发送输出包之前丢失
客户端不可能提前收到回复
它们也不会识别出异常发生
所以我们需要有输出规则进行限制
这是非常底层的知识
但我并不了解
先等副节点确认已经收到最新消息
这是几乎所有主备复制模式性能的一道坎
这种同步等待让主节点不会领先于副节点太多
因为如果主节点在领先的情况下出现故障
副节点就会出现数据延迟
副节点的进度和客户端会不一致
所以每种主备系统都有这样的问题
某个时间主节点必须等待副节点
这是对性能实打实的限制
即使机器是在相邻机架上
主节点发送消息和接收确认
主副节点必须位于不同的城市
如果我们主副节点在不同城市进行复制
每一个发送的包
但是对于一些数据库服务
比如需要每秒处理百万请求
那将会对性能有极大的影响
这也时在条件允许的情况下
人们会使用一些不同的主副复制模式
然后不需要每个包都等待确认
比如只在进行高层次操作时才等待
只读操作完全不需要等待
只需要等待写操作同步或者其他一些操作
但你需要在应用层上实现这些区分
你说的都是对的
虚拟机监视器不需要阻止主节点执行命令
只需要阻止输出就好
这可能可以做得更好
但至少这样在一个服务中
可以在几微秒内响应客户端
如果我们要先等待处于另一个城市的副节点响应
如果你有大量客户端并发请求
虽然可能在高延迟下完成大量处理
但是你需要非常巧妙的设计才能做到
这是个很好的想法
但是如果你将消息记录到主节点内存中
在主节点宕机时日志就会丢失
通常认为服务器失效就意味着
服务器内存中的内容都会丢失
或者即使你不会如此
比如说失效是因为主节点电源被意外拔掉
但你有备用电源之类
你也做不到
副节点也做不到如此
实际上系统在副节点的内存中记录了输出
这个想法很棒
我完全没有想过
这或许可以
还有一个可能出现的情况
主节点在输出已经发送出去之后宕机
客户端已经收到回复
然后主节点宕机
副节点的输入还在事件缓冲中
在副节点的虚拟机监视器种
还没有投递到真正的服务副本
副节点要顶替宕机的主节点
它首先要消费所有未处理的记录
以赶上主节点的进度
否则主副节点进度就会不一致
副节点在接管服务之前要先消费完记录
最后一条记录是客户端的请求
副节点会在它之后开始接管服务
在传递客户端请求的中断之后
如果真的发生这种情况的话是不对的
如果是单服务器的话这不应该发生
好消息则是
当副节点接管时
还有所有的序列号
当它产生这个包时
它会产生和原来的包一样的序列号
而在用户层软件中永远不会看到重复包
所以这个系统中
你可以认为问题被意外解决了或者被巧妙处理了
但事实上对于所有能够进行切换的复制系统
也就是大部分的复制系统
很难将他们设计成
保证切换时不会有重复输出
你可以在两边都引发报错
然后在两边都不生成输出
但是这种做法很糟糕
或者你可以允许切换时有两次输出
总之没有办法可以保证只有一次输出
两边都引发报错或者允许可能的重复输出
都需要重复包的检测机制
