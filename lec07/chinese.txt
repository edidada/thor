假设有三台像这样带有日志的服务
假设有三台像这样的带有日志的服务
我正在写的数字是
日志条目中命令的任期编号
所以我们不关心真正的命令是什么
然后这里有一些日志插槽
然后让我们假设
尽管你实际无法根据黑板上的证据看出这一点
尽管你实际无法根据黑板上的证据看出这一点
被选作领导者
想发送新的日志条目
以及客户端发给领导者的命令
我们想将它们复制到
所有跟随者们的日志上
领导者应该附加关于前一个插槽的信息
领导者应该附加关于前一个插槽的信息
这个插槽在新的发送条目前面
所以发送这些信息给跟随者们
应该检查……
跟随者们知道他们接受到
是从这里开始的
首先他们要检查……
收到消息的跟随者们检查
他们前一个日志条目是否匹配
领导者发来的关于前一条的信息
到目前为止很好
糟糕的事情已经
在这里被避免
我们完全不想看到的坏事情是
服务把新的日志条目添加到这里
服务把新的日志条目添加到这里
这会打破图中方案所依赖的
归纳证明的顺序性
有一条不同的日志
所以领导者看到了两个拒绝
如果……
在这之前先说明
如果服务在这里发送
这种情况发生在
当领导者刚刚重启
所以它对两个回复错误的服务
但是领导者这次将要发送的日志条目
但是领导者这次将要发送的日志条目
包括了所有
与领导者发送的任期相同
它将返回另外一个错误
它将发送从这之后的日志
它们是根据这个插槽设置的
它将会接受新的日志条目
并发送肯定的回复
它们都拥有最新的日志了
领导者在看到跟随者
都接受了请求
且追加了一定数量的条目
所以这种复制方式的作用是
领导者使用一种复制机制
来探测跟随者们的日志中
第一个与领导者的相同的位置
第一个与领导者的相同的位置
然后给每个跟随者发送
从这个位置的
剩余全部的领导者日志
有什么问题吗
重复我们之前讨论过的
可能已经
擦除了一些日志条目
他们是……
所以会有一些……
问题是为什么系统忘记了
这条我们删除的条目对应了
某个被丢弃的客户端命令
我昨天曾经讨论过这个问题
这里的原理是什么呢
因此无论之前的领导者是谁
发送的这条日志
都没有得到大多数服务的确认
因此之前的领导者
不可能决定提交它
不可能执行它
不可能把它应用到应用状态上
不可能回复肯定的答复给客户端
不可能回复肯定的答复给客户端
因此它没有被大多数服务所完成
发送它的客户端没有理由
相信这条命令被执行了
领导者只回复给客户端
领导者只回复给客户端
在命令被提交并且被执行后
所以客户端没有理由认为
命令被任何服务所接收了
如果客户端过了一段时间没有收到回复
它应该重新发送请求
所以我们知道无论这个请求是什么
没有把它包含在任何状态中
客户端将在不久后重新发送它
它总是会删除跟随者日志的后缀
一个备选的答案是
它可以发送完整的日志给跟随者
事实上如果
如果你刚刚启动这个系统
甚至在一开始就发生了非常反常的事情
你可能要结束这个命令
你可能要结束备份第一个条目
然后让领导者发送整个日志
但是因为领导者拥有整个日志
但是因为领导者拥有整个日志
所以它拥有填充每个节点的日志所需的所有信息
所以它具有填充每个节点的日志所需的所有信息
问题是哪些节点允许成为领导者
问题是哪些节点允许成为领导者
