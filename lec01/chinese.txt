让我们开始课程
本节课我们从分布式系统的
整体概要开始讲起
大家都知道本课程的核心是
一系列计算集群通过网络
共同完成
某一串连贯的任务
因此，我们在本课程中
重点介绍的一些案例包括：
大型网站的储存系统
以及一些更为奇妙的技术
比如点对点的文件共享
这只是我们学习过程中的一些例子
我们同样会关注
为何分布式计算之所以如此重要
是因为许多重要的基础设施
都是在此基础上建立的
他们都需要多台计算机
或者说本质上是
多台物理隔离的计算机
共同完成自己的工作
以及为何人们要创建这种运算架构
我会先介绍分布式系统
也是提醒大家
在你设计一个系统时
或者面对一个你需要解决的问题时
你需要知道他是否可以在
不需要分布式系统的单机上解决
如果可以那就应该用单机解决
因为很多的工作都可以在
一台计算机上完成
这通常比分布式系统简单很多
在选择使用分布式系统解决问题前
你需要充分尝试别的思路
因为分布式系统会让问题解决
变得复杂
我们也会说是什么促使了人们
通过计算集群来达到
更高的计算性能
以及思考他们是如何实现
大量磁盘臂也在同时移动
以及为何要在
计算集群中处理
容错问题
比如两台计算机运行
完全相同的任务
以防在其中一台发生问题
以及一些
物理上的问题
比如你在用网银转账之类的操作
我们假设
这就需要一种
克服两个银行服务器之间
物理距离的
通信方式
这是一个不可避免
的空间问题
最后人们为了解决
一些安全问题
比如有一些代码并不被信任
但是你有需要和他进行交互
这些代码不会立刻做出坏事
或者说这些代码只是
你可能需要将代码
分多处运行
在你的计算机上
和我的计算机上都会运行
两份代码需要通过
某个狭义的网络协议通信
我们可能会担心
这里的安全问题
我们把它分成更多的计算机
就可能出现孤立的问题
这门课我们会一直讨论
性能和容错
剩下两点我们会通过
对某些案例的研究
来学习
下面我们来看
这些分布式系统的问题
因为系统中存在很多部分
这些部分又在并发执行
正因为有多台计算机
所以才会遇到并发编程
以及各种复杂交互
所带来的各种问题
我们还要考虑一些时序问题
这让分布式系统这门课变得很难
另一个很难的问题是
你会有多个实例
再加上网络
所以会遇到一些意想不到的报错
如果只有一台计算机
通常它只会正常工作
或者可能会崩溃
或者是电源有问题之类的
分布式系统却不是这样
因为多台计算机中
可能会遇到一部分实例停止
导致的局部错误
但是其他部分依旧在正常运行
或者这些计算机都在正常运行
但是网络断了或者不稳定
局部错误也是使这门课
很难的原因之一
最后一点很难的问题是
人们设计分布式系统
的根本原因是为了
获得更高的性能
比如一千台计算机
一千个磁盘臂达到的性能
但是实际上
一千台机器到底有几千台性能
是一个棘手的问题
这有很多难点
人们倍加小心地设计
它的性能达到了你投入的预期
那么解决这些问题
就是本课的全部
我想选择来上这门课
来解决这些问题
是因为问题和解决方案
在技术上都很有趣
有些很难的问题
有着很漂亮的解决方案
但是有些问题就没有那么好的
解决方案
分布式系统正在现实生活中被运用
像很多大型网站
他们把大量的计算机
放在一起作为分布式系统
当我刚开始教这门课的时候
分布式系统还是一种
学术上的好奇尝试
人们只是发现
有时需要一些小型扩容
并且预感在未来
这可能很重要
但是随着大型网站的兴起和推动
出现了大量的数据
和充满服务器的仓库
再过去的二十年中
分布式系统已经是
计算架构中很重要的一部分
这意味着
大量的精力投入到
解决相关问题的工作中
但是同样有少数问题
没有被解决
如果你对这方面研究感兴趣
还有很多关于分布式系统的问题
等着你去解决
你们可以关注相关研究
这会是一门不错的课程
因为他有一系列实验
你会编写出重点为高性能和容错的
相当真实的
分布式系统
所以你会有很多机会
去构建一个分布式系统
并且让他们正常工作
说一下课程结构
你们可能是通过百度找到了
这门课的网站
网站上有一些实验作业
你可以在那里发布问题并获得解答
课程主要的教学人员有
也有四个助教
你们想站起来和大家打个招呼嘛
助教会重点解决实验问题
在工作时间
他们也会在办公室解答
各位关于实验的问题
你可以去办公室或将课程相关问题
这门课有几个重要组成部分
一个是课堂授课
两次编程实验
以及一个可选的期末大作业
你可以用一个实验来代替它
授课内容会围绕分布式系统
主要是上面两个问题（性能和容错）
同样也有几堂课会说一些关于
编程实验的内容
许多课程我们以案例分析为
主要形式
我会在课前提供一些
关于分布式系统的论文
关于现实问题的
现实解决方案
授课内容会被录像
我希望课程可以上传到网络
这样你们可以在别的地方
观看授课视频
你们也可以回顾课程视频
这里的论文每周会发布一次
主要为学术研究中
的一些经典论文
比如像今天我希望你们阅读
但是这篇论文不论在学术界还是工业界
都激发了巨大的
关于分布式系统的兴趣
他们会讨论一些
最近人们关心的
最新研究成果
我希望这些论文可以让弄清楚
这可能会也可能不会
对解决分布式系统的问题有用
我们有时会讨论这些论文中的
一些实施细节
因为包括很多
软件系统的实际组成
我们同样需要花一些时间
去看对人们对系统的评价
人们是如何通过
评估系统容错性
评估系统性能
或者是否有性能提升
来评价这个系统
我希望你们可以在来到课堂之前
完成论文的阅读
如果没有提前阅读
课堂授课不一定有足够的时间
我们没有足够的时间来解释
论文中的每一个概念
同时还要兼顾一些
有趣的拓展
我认真的希望大家来
课堂之前阅读论文
我也希望快速高效的读论文
会是这堂课的一个收获
比如跳过一些
并不太重要的部分
而琢磨作者重要的想法
我们课程网站上每一个日程的链接
都有一个思考问题
你应该在读完每篇论文后
回答这个问题
最好在零点前提交
我们也需要你在网站上提出
关于论文的一些问题
也可以让我思考一下我对课程的准备
如果我有时间
我会至少通过电子邮件
回答一部分问题
这些问题和回答都需要
在零点前提交
有两次考试
一次是随堂期中
大概在春假前最后一节课
并且会在学期期末周
迎来期末考试
考试内容主要为论文和实验中的内容
这是我建议最好的准备方式
当然参加课堂授课
阅读论文
准备期末考的好方法
你们应该可以了解
我会在考试中
提出哪一类问题
因为我们不可避免地会读到
一些重复的论文
会有一些类似的问题
出现在历年的题目中
关于四次实验
第一次实验需要在下周五前完成
根据你们在论文中读到的来写
我们几分钟后会讨论
这篇论文
为了实现容错
这是一个理论上
通过复制来让系统容错的算法
他管理复制
管理一种自动剔除
有问题的副本服务器
在第三个实验中
他可以完成复制并容错
在第四个实验中你需要
一系列的独立集群中
通过这些独立的副本集群
进行加速
并行的对集群进行多个复制
你同样需要负责
不同服务期间
许多数据块的移动
来让他们在运行过程中不损失
任何的数据
分片是指我们将数据放到了
多个服务器上的多个分区
来实现并行加速
如果你不想做实验四
你也可以选择你自己的项目
如果你对分布式系统
有一些自己的想法
比如我们课堂上讨论到的
某个类型的分布式系统
或者说你有一些
自己的追求
并且对这个想法进行评估
看他们能不能正确运行
你可以选择做这个项目
这个项目中你需要联系一些你的同学
小组形式完成
其中有人需要把想法发给我
我来确定下是否合适
或者是给你一些建议
如果我觉得合适
你也想做这个项目
你就可以用它在本学期末
代替实验四
你需要做一些系统设计
并构建一个真实的系统
在最后一节课前演示
同时需要交一个简短的
关于你如何构建它的书面报告
我会在课程网站上
提出一些或许对你们有帮助的
大胆的想法
关于你应该如何构建这个项目
当然最好的项目应该是
你自己有一个很好的想法
你需要选择一个
和课程讨论内容
相关的系统
作为你的
项目
回到实验部分
实验成绩会有一系列
针对你代码的测试构成
你的成绩就是在我们所有的测试中
你通过了多少个
我们会公开全部的测试数据
如果你完成的实验
可靠的通过了全部测试
全部通过很有可能的
除非出现一些有趣的问题
一般来说
只要你在运行时通过了全部测试
你提交给我们运行也会通过全部测试
这样就会得到满分
希望你们不会有任何
关于实验的问题
我需要提醒你的是
因为他们是分布式系统
他们有很多并发和通信的问题
可能发生一些奇怪而困难的错误
你们应该尽早开始实验
不要在提交实验的
最后时刻还要
处理很多麻烦
如果有对实验有问题
可以在工作时间来到助教办公室
当然我也希望
如果你知道一个问题的答案
还有什么关于课程的问题吗
你问了这些部分
在总成绩的占比是多少
我其实不记得了
不过你在课程网站上
应该能找到答案
我想实验应该是占比最大的
关于应用的基础设施的
所以即便课程中我们会
分开说一些
不同的应用
在这些基础设施上
编写的应用
但是我们在本课程中
应该关注的是这些基础设施
这些基础设施可能会
和计算问题
我们会讨论包含所有
这三个部分的基础设施
但事实证明我们最关注的
是储存部分
这是一个定义明确并有用的抽象概念
并且通常比较直白
人们对于如何构建和使用储存系统
人们对于如何构建和使用储存系统
包括去构建一种
我们还会讨论一些
我们现在正在使用的计算系统
我们也会说一些
关于通信的问题
但是出发点是我们
建立分布式系统所用的工具
比如一台计算机可能
需要通过网络相互通信
但是可能需要保证一定的可靠性
所以我们会提到一点
实际上我们更多是
使用已有的通信方式
如果你想了解更多关于通信系统的问题
因此对于储存和计算
很多学习目标都是
需要研究一些抽象方法
比如如何简化这些
分布式储存和计算基础设施的接口设计
分布式储存和计算基础设施的接口设计
我们就能以此构建应用
最重要的是
我们希望通过构建这种抽象的接口
将这些分布式特性隐藏在整个系统内而不被用户感知
将这些分布式特性隐藏在整个系统内而不被用户感知
这是个几乎无法完全实现的梦想
但是我们确实希望建立这样的
一个看上去完全是非分布式系统的储存接口
一个看上去完全是非分布式系统的储存接口
就像一个普通的文件系统
或者是一个大家都已经熟知如何写代码
或者是一个大家都已经熟知如何写代码
或者是一个大家都已经熟知如何写代码
我们希望有一个看上去
具有正常非分布式行为的
文件系统和计算系统
但是实际上其中又有着
极高的计算性能和容错的分布式系统
我们都需要建立这个抽象
但是随着课程进行
我们会知道
很少有人能找到一个抽象
觉有这些分布式系统的
储存和计算特性
又有着非分布式系统一样
人人都能理解的
简单的行为
这方便我们还在尝试努力
课程中我们会学习人们在
建立这些抽象的过程中做的努力
那么我们在考虑抽象时
首先需要看一个怎样的话题呢
第一个话题
也是一个概括性话题
我们会看到的很多系统
都和他们的实现有关
比如你看到很多人
在构建他们的系统时会用到
试图掩盖我们正在
不可靠网络上通信的事实
另一个我们会看到的实现是线程
这是一种编程技术
让我们可以驾驭多核心计算机
让我们可以驾驭多核心计算机
线程提供了一种结构化的并发操作方式
线程提供了一种结构化的并发操作方式
为的是简化程序员对这些
并发操作的视角
因为我们会经常用到线程
我们知道
在实现这个层次上
我们需要花费许多时间
来思考并发控制
比如锁
关于这些实现思想会在课程中涉及
我们也会在许多论文里看到
但是你需要在实验里面对大多数这些问题
但是你需要在实验里面对大多数这些问题
你需要构建分布式系统统
如何进行分布式系统的编程
就像很多大家都知道的重要工具一样
就像很多大家都知道的重要工具一样
当然不是普通的编程
这是一些你构建分布式系统
需要使用的关键工具
另一个重要主题
很多论文里都会提到的：性能
构建分布式系统的更高目标
我们正在努力提高可扩展性
如果我用一台计算机解决了一些问题
当我买第二台计算机
去计算这个问题时
只要一半的时间
或者说比如说是每分钟内
可以解决两倍数量的问题
这是一个很强的工具
如果你真的构建了一个系统
只要提高几倍的机器的数量
只要提高几倍的机器的数量
系统就能同样提高几倍的性能或者吞吐量
系统就能同样提高几倍的性能或者吞吐量
这是一个巨大的胜利
因为只要有钱就可以为所欲为买计算机
就能达到这种效果
这种性能的提升
否则就需要去给程序员
付钱去重构这些软件
来优化它的运行
或者提供一些特殊的技术
比如一个更好的算法之类
或者就要花高价雇程序员
来修补这些代码
从而提高运行速度
我们都希望比如从十台计算机
提升到一千台计算机
就能扛住一百倍的流量
那这也太棒了
因此当人们构建一个
巨大的购物网站的时候
有一整栋楼的计算机在运行
他们共同完成网站的运行
这是一个很棒的
可扩展性的思路
但是另一方面
你需要仔细设计系统
比如我们来看这样一个图
比如我们来看这样一个图
我们假设我们在
建立一个常规网站
让我们先写一些用户
和很多浏览器
以及访问一些数据库
网站只有一两个用户的时候
一台计算机就可以负担
一台跑数据库
但是有可能你的网站
一夜之间火了起来
你发现可能有一亿人
你怎么去维护你的网站
一台机器承受一亿用户的流量不太可能
当然如果做了特殊的
劳动密集型优化除外
但很显然你没有那个时间
所以你要做的第一件事情
然后把不同用户分到不同机器上
一些用户或者特定的用户
去访问第一台服务器
另一半用户则去访问第二台
然而因为一些原因
所有的用户都需要
最终查看相同的数据
和数据库通信
提高后端代码并行效率
但是如果你是在跑
效率可能提高不了多少
因为单台服务器没有提高多少效率
在数据库这里你也要
加同样多的机器避免问题
但是不幸的是
这种可扩展性很少是无限的
这种可扩展性很少是无限的
这个系统慢慢会变成
都在和同一个数据库通信
突然数据库这里成了瓶颈
所以很少有一个
你可以通过无限制添加服务器
就能完全解决扩展性的问题
随着你加了
越累越多的机器
机器本身的数量已经不是瓶颈了
瓶颈转移到了别的地方
限制了性能
实际上你不可避免地
要做一些架构设计
因为很少有
这么直接的从一台数据库
读数据的例子
一台数据库你可以轻易排序
但你需要重构
把它分成多台数据库服务器
但这同样需要大量工作
因为他很笨重
但是很多人确实需要这样做
我们在本课程中
会看到很多例子
人们讨论的一个分布式系统
是一个储存系统
因为作者在运行大型网站
并且单个服务器或者是
储存服务器都用光了
于是这个扩展的故事是
我们希望可以这样简单的加钱买机器实现可扩展性
但是这点很难实现
于是这些设计工作
其实会一直把这些想法推进下去
另一个重要的话题是容错
如果你建立了一个单机系统
其实很好的使用单台计算机
可以让他保持运行很多年
就像我办公室的服务器已经
运行了很多年而不会崩溃一样
电脑是可靠的
操作系统是可靠的
我办公室的电源也是可靠的
所以一台计算机
正常工作很长时间
是并不少见的
然而如果你建立了一个
数千台计算机组成的集群
那么即使每台计算机可以与一千台计算机一起运行一年
那么即使每台计算机可以与一千台计算机一起运行一年
这也意味着这一千台计算机中
所以大型分布式系统中的一个大问题是
所以大型分布式系统中的一个大问题是
我们把一个很罕见的错误
我们把一个很罕见的错误
转变成了一个在一千台的
分布式系统中
常见的错误
甚至在这种集群中
一直在发生的错误
总有一些机器会崩溃
或者神秘地错误运行了
再有一千台计算机的网络中
有许多的网络电缆
许多的网络交换机
你要知道总有人会踩着电缆
所以这是不可靠的
或者网络电缆掉线了
或者某些交换机风扇坏了
然后他们过热就不工作了
在你构建分布式系统的过程中
各种地方总有一些小问题
因此这个这个分布式系统的扩容
把一个几乎不必要考虑的小问题
变成了一个持续不断的问题
这意味着对错误而言
以及继续处理的能力
必须要在架构设计时就建立
因为错误总会发生
毕竟为应用开发者
提供方便的抽象接口
是我们真正要做的
但是我们需要构建
尽可能多的基础设施
才可能向应用开发者
隐藏和掩盖
这样每个应用开发者
就不需要一个复杂的代码
来处理各种各样的
类型的错误
比如说容错到底指什么
这会有一些不同的概念表述
这会有一些不同的概念表述
但你应该明确的知道
尽管表述有很多
尽管表述有很多
有一个共同的思想就是可用性
某些系统经过精心设计
以便在某种特定类型的错误下
当然特定类型不可能是所有类型
系统可以正常运行
他们可以提供给你完整的服务
他们可以提供给你完整的服务
就像他们没有发生任何错误
就像他们没有发生任何错误
某些系统的有这样一个可用的场景
你建立了冗余的服务
比如说有两个备份
即便一个备份发生了问题
即便一个备份发生了问题
可能另一个服务器还能正常运行
除非这两个都发生了错误
我们不能在这个例子中
给出可用性的承诺
我们的可用性都是建立在特定错误类型上的
我们的可用性都是建立在特定错误类型上的
这样才能继续正常服务
如果出现了超出范围的错误
就不再可用了
另一种容错
在除了可用性之外
他们自身的可恢复性也是一方面
他们自身的可恢复性也是一方面
这意味着如果出现问题
他会停止工作
他只是单纯的不响应请求了
等到有人来进行修复后
在修复完成后
如果没有发生一些更糟糕的事情
系统给可以继续正常运行
系统给可以继续正常运行
这比可用性要弱一些
因为在出现故障的组件
被修复之前
他不会做任何事情
但是这一切都建立在没有损失正确性的前提下
但是这一切都建立在没有损失正确性的前提下
但是这一切都建立在没有损失正确性的前提下
所以这仍然是一个重要的要求
对于一个可恢复的系统
你通常要在系统崩溃前做一些事情
比如将最新日期存盘
才能在恢复后取回来
比如供电恢复之后
对于一个高可用的系统
在实际生活中
我们为了让一个系统好用
我们让系统保持可用
直到一定量的错误发生
如果有太多的错误发生
这个系统就会停止工作
或者停止对一切的响应
但是一旦足够的问题被修复
系统会继续工作
所以一个好的高可用系统
应该也是可恢复的
敏感的察觉发生了很多错误
然后停止响应
但是在之后依旧正确工作
我们很喜欢这一点
我们会看到的最有效的工具是
解决这种问题的多种方法
解决这种问题的多种方法
实际上在这一部分中
最重要的工具是
非易失性存储
一些类似于电源崩溃故障
即便是整栋楼的电源故障
我们可以用非易失性存储
我们存放一些检查点
或者关于系统状态的日志
在备用电源恢复或者故障修好了
我们得到通知可以去
读取最新的硬盘状态
并且继续从那里继续操作
（板书）非易失性存储
于是出现了许多非易失性存储的管理工具
于是出现了许多非易失性存储的管理工具
因为非易失性存储更新起来很昂贵
因此构建高性能容错系统非常繁琐
因此构建高性能容错系统非常繁琐
因此构建高性能容错系统非常繁琐
所以一个聪明的方法是
避免写入非易失性存储
这在过去很常用
也需要移动磁盘臂
等待磁盘盘面旋转
这两个过程都很缓慢
即便已经在闪存读写上好了很多
即便已经在闪存读写上好了很多
依旧会遇到很多性能不够的情况
我们拥有的另一个重要的容错的工具
我们拥有的另一个重要的容错的工具
是复制
复制的管理对你们可能有些棘手
任何一个复制系统中
都有一个非常关键的问题
比如我们有两台本应该有着
完全相同的副本的系统
这个关键的问题就是
这两个副本总会意外的
实际上对于任何一个设计
我们都能看到这种
通过使用复制实现的容错
通过管理管理复制实现的容错
通过管理管理复制实现的容错
你们会看到这非常复杂
是一致性
例如我们正在构建分布式存储系统
例如我们正在构建分布式存储系统
它只支持两种操作
系统背后可能是一个
通过一个大型的表之类
实现了这种操作
作为返回值发回来
我很难找到把别的例子作为
分布式系统的例子
这是一个还不错的例子
这个例子也很实用
这可以算是一种
简单版本的储存系统
当然如果你是以为应用程序员
如果对这两个操作有解释
是非常有帮助的
你可以去查手册
手册会向你解释
它会返回什么
因为它们的含义对应着某种规范
你又应该怎么写代码呢
你又应该怎么写代码呢
这就是我们关于一致性的话题
以及为何这是一个
在分布式系统中有趣的话题
处于性能和容错两方面考虑
处于性能和容错两方面考虑
我们通常有多个数据副本
我们通常有多个数据副本
所以在一个非分布式系统中
我们只有一台服务器一张表
他们通常（虽然也不总是）
是没有相对而言没有歧义的
一般就是正确的
更新这个表
但是在分布式系统中
数据可能有超过一个副本
可能是因为复制或缓存的原因
可能是因为复制或缓存的原因
如果其中有一个客户端
在服务器就有了两个副本
这里有一个客户端
他希望更新
比如这可能是一个计数器
他发送给了第一台服务器
他需要同步每一个副本
就在他正准备给第二台服务器
发送同样的请求时
这个客户端崩溃了
可能是电源故障
现在留下了一个不太好的状态
两个副本中一个的状态
这取决于他们的请求
发送到了哪个服务器
即便始终把第一台服务器放在首位
我们构建容错系统时
实际规则应该是
你先去请求第一台服务器
遇到某些情况再请求下面这台
有风险遇到陈旧的数据副本
很有可能的是
请求到了一周前的旧数据
这就会导致不一致
这显然是会发生的
我们总会有不小心
所以我们需要实际写下
就像在这种危险的复制中
实际上
关于一致性的不同定义有很多
许多听起来相对直白
许多听起来相对直白
比如我这里说的
这就是所谓的强一致性
这就是所谓的强一致性
相对弱的一致性也很有用
比如说
（板书）强一致性
（板书）强一致性
当然还有很多别的工作要做
另一方面还有弱一致性
对于弱一致性系统
他们不会做任何保证
这些保证可能是
甚至可能在一个无限的时间里都是这样
人们之所以对弱一致性感兴趣
人们之所以对弱一致性方案感兴趣
因为强一致性虽然可以
让我看到的就是
保证是最新的值
但是这个实现可能很昂贵
因为这意味着
总有部分需要做很多的通信
来完成某一种强一致性概念的实现
来完成某一种强一致性概念的实现
如果你有多个副本
这意味着不管是写入还是读取
都需要询问每一个副本
比如在我们的例子中
我们要知道客户端崩溃了
如果我们要实现强一致性
有一个简单的方法是
让客户端同时读取两个副本
如果有一个更大一些
那这个就是最新的值
我们这样就找到了
但这十分昂贵
客户端要很多交流才得到一个值
所以为了尽可能地避免通信
特别是副本隔得足够远
人们会建立一个弱一致性系统
在这种情况下
它实际上允许读取这个旧的值
当然为了让弱一致性更有用
人们还会定义许多语义
我们这里其实是一个通信问题
强一致性需要更昂贵的通信
强一致性需要更昂贵的通信
这会让人陷入麻烦
如果我们把副本用于容错
我们实际上希望他们可以
有着不同的故障概率
也就是不相关的故障
比如
把所有的副本放在同一个机房的
同一个机架上
这可能是一个糟糕的主意
因为如果有人绊倒了
那台机架的电源线
我们的两个副本都会完蛋
因为它们都连接到同一
机架中的同一电源线上了
因此，为了使副本
尽可能独立且容错
以获得良好的容错能力
人们希望将不同的副本尽可能地分开远放
例如放在不同的城市
或大陆的相对的两侧
这样，能摧毁一个数据中心的地震
就极不可能
也摧毁另一个作为备份的数据中心
如大家所知，我们希望
能够做到这一点，如果你这样做
那么另一个副本是在数千
英里开外
按光传播的速度来算，它可能会耗费
几毫秒或几十毫秒
与横跨洲际的数据中心进行通信
与横跨洲际的数据中心进行通信
只为更新数据的另一个副本
这使得通信
需要强一致性和
高一致性，极可能非常耗时
就像每次你想做一部歌剧一样
就像每次你想做一部歌剧一样
又或者取决于你如何实现它
你可能必须坐在那里
去同时通信到两个
数据中心的副本，用来确保
它们都已更新或已被检查
以便获得最新的副本
那当然耗损巨大
毕竟（用这些时间）我可以执行约十亿
每秒的指令数，故而我们浪费了
过多的潜在可执行指令
在我们等待人们用比较差的系统时
你只能更新
仅向你轮询的
最近的副本，我的意思是
现实世界的很多学术研究
都在研究如何构建
弱一致性保证，那样他们
对应用程序才真正有用，以及如何
利用它们来
实质性获得高性能
这些就是本课程中技术思想的快速预览
这些就是本课程中技术思想的快速预览
有没有对刚才所讲的内容不懂的
主要是详细案例研究
这些案例实际上会阐明
我们现在在这里所讲内容的大部分思想
现在有一个系统
那时他们面临的问题是
比如创建所有网页内容的索引
或分析整个网络的链接结构
或分析整个网络的链接结构
以便识别出最重要的页面或
最权威的页面，正如大家知道的那样
那时，整个网络甚至有
网络索引基本上等于
跑遍所有的数据
大家知道，这些相当
耗时，还有对整个内容进行排序
就像我一直用
单台电脑那样
要花多长时间，但，你知道
那（可能是）几周，几个月或几年，甚至更多
极其渴望能
在数以千计的计算机上进行巨型数据计算
以便
计算可以快速完成
对他们来说购买大量计算机是值得的
那样他们的工程师
就不必浪费很多时间
在看报纸或看其他东西上
在等待他们的大型计算任务完成时
所以，有一段时间，他们让他们的
聪明的工程师，手写
如果你需要写一个网站
眨眼分析工具
工程师确实会写
但他们从不写你在电脑上喜欢的任何软件
但他们从不写你在电脑上喜欢的任何软件
他们费力写那种一次性的
手动咬合的软件
来入手他们正在解决的任何问题
所以以某种方式将其分包到大量
电脑上，管理
运算，再取回数据，如果你
只雇用熟练分布式系统专家的工程师
就够了
尽管即使那样也很
浪费工程任务量，但他们
想雇用有其他方面特长的人
不一定是
想把所有时间花在
编写分布式系统软件的工程师
他们实际上需要某种
框架，那将很容易
让他们的工程师
写出他们想做的任何分析的内容
诸如排序算法、网络索引
链接分析器或其他任何的东西
就写写那个应用程序的内容
但无法在数千个电脑上运行它
不用考虑
如何在数千台计算机上分发任务的详细信息
如何在数千台计算机上分发任务的详细信息
如何组织所有的数据移动也是必需（考虑）的
如何应对不可避免的错误
于是他们找寻
易于使用的框架
让非专家也能够撰写和
运行巨型分布式计算
设计思想是程序员只
编写应用程序，设计师
分布式计算的使用者
即使不知道任何分布式相关的内容
会处理剩下的
取决于它启动时是否假设
有一些输入，这些输入
以某种方式被分成一堆
不同的文件或块
我们假设
输入文件一，放入文件二，依此类推
这些输入也许是
从网上抓取的网页或更
可能是包含了许多网站的大文件
每个都包含许多
从网上抓取的网页文件
当然可以
这里我们可以看到一些明显的可用的并行
函数只关注输入和输出
函数只关注输入和输出
它将文件作为输入
该文件是输入数据的一部分
例如，假设，我们
是计算每个单词出现的次数
函数会将输入分割成
单词或随处可见
然后再进行整体计算
得出最终输出
得到一个中间量
这篇论文中叫做
中间输出
第二阶段的计算
全部都会被收集并供
程序员调用
当然，需要真正的收集
所以我们不讨论
数据移动，我，我们要
出现在我们这些简单计数示例的每个数学输出中
出现在我们这些简单计数示例的每个数学输出中
做或其中任何一个必须做的，就只是
计算传递给它的项目数
甚至不用看具体的项目
因为它知道每个都是
为了完整性
一些术语
这整个计算称为任务
我们有整个任务
它由一堆数学任务组成
然后是一堆生成的任务
这是单词计数的一个例子
函数长什么样
我们现在讨论的函数
是用普通的编程语言写的
这只是码人
普通人可以写
通常会被忽略，我们真正在意的是
包含了所有的文本
每个词
我们生成的框架
可能就这么简单
任何分布式和
我们需要跨网络移动数据
或谁知道的什么
这非常简单明了
这里我们不关心他们，我们只是
关心他们有多少
非常简单
不需要容错知识
或其他任何知识
对基本框架有什么疑惑吗
在现实生活中可以
在现实生活中这是日常的
生成一些输出
做一些非常复杂的多阶段
分析或迭代算法
估测不同的网页有多重要或多有影响力
估测不同的网页有多重要或多有影响力
迭代算法是渐进的
收敛于答案
我想他们最初就是这样
每个输出都是
更新的网页列表
更新的内容是每个网页的价值，权重或重要性
得到一个输出
哦，是的，是的
你需要根据输出设定一些内容
在某种程度上了解
哦，我需要按一定格式或信息
所需生成数据
实际上引出了一些
如果你需要运行的算法很容易
表达成数学形式，随后是
可以以这种形式展示
完全独立
必须是纯函数性的
函数性函数
只需看看他们的参数，仅此而已
那就像一个限制
事实证明，很多人想要
运行更长的管道
涉及很多很多不同种类的
你不得不拼装
这些我们将在后面讨论
这节课更擅长让你
指定完整的计算管道
他们会做优化
框架实现了所有
你要做的事情和组织
更复杂有效地优化
更复杂的计算
从程序员的角度来看
这将关乎
任务进程和任务服务器
除其他情况外
是的，从我们的角度来看，我们比较关心
环境框架是如何组织这些的
环境框架是如何组织这些的
从程序员的角度来看
所有分发的内容都弄完了
实时数据是什么情况
现在有两个问题，一个是当你
另一个问题是函数怎样运行
实际答案是，首先
这些东西是如何运行
有许多，比如一千台服务器，实际上
这里需要关注的内容是在这篇论文里找出一个
在这个基础上，现实世界里
有许多
服务器集群，我们称它们为
工作服务器或工作站
来管理整个计算过程
服务器知道有
许多输入文件
如五千个输入文件
它将消息发送给
会读取文件，读取输入，无论是什么
然后工作进程
会进行内部实现
工作进程会将这些数据写到本地磁盘的文件
它们在
每台机器有
它需要的地方
在典型的大型计算中
那会变成事实的
这是一个简单的例子
指令会生成很多
所以通常，在我们
在我们数千台服务器中的一台上运行
将不得不去与
上千个服务器中的另外的每个单个服务器进行通信
把他们通过网络发送给我
它负责
一旦它收集完所有数据
谷歌使用的集群文件服务中的文件里
这里有些东西
我还没提过，我没有提到
输入所在的位置以及
输出所在的位置，他们都在文件里，因为
一段输入，我们需要灵活性
也就是
我们需要某种网络文件系统
存储输入数据
实际上这篇论文谈到了这个，即
这是一个你能读取我的文件的文件系统
这是一个你能读取我的文件的文件系统
如果你写
网页内容，你只需把他们写到
使其均匀地分布在所有
这非常美妙，这正是我们需要的
抓取的整个网站作为输入
数据均匀分割后
存储在所有的跨服务器上了
这意味着
我们有一千台服务器
他们可以并行地读取
总的庞大的
读取吞吐量
一千台服务器上的
有一组物理机器
对，所以问题是
这里的箭头实际上涉及了什么内容
答案是实际上那是随着时间改变的
涉足这个系统后
在一般情况下，如果我们有
大文件存储在某个大网络文件系统中
你去跟某些数据集通信
你的数据在集群服务器里被拆分
你必须在网络上和那些服务器通信
你必须在网络上和那些服务器通信
去检索你的数据，在那种情况下
跨网通信到
存储部分输入的服务器
那当然是最一般的情况
如何工作的
在这篇论文里面，如果你做了
那里有很多网络通信
数据中心
但仍然需要很多时间
他们最具约束力的瓶颈
因为它们要在网络上运行
如果你深读了
评估部分
他们的网络，有成千上万的
机器
他们会集成机器
他们会插入机器
机器的每个机架
机架的以太网交换机或者其他
他们全部
需要互相通信
还有路由以太网交换机
所有的网络交换机要与之通信
如果你只是
可能最少是
他们之间必须跨通信的时间的一半
他们之间必须跨通信的时间的一半
这一个不会改变他们的路线
仅占总吞吐量的一部分
我忘了
但是当我做除法时
被除数是
路线中可用的总吞吐量
我得到的结论是
路由交换机或整个网络
在他们的设置中
但实际上
只有非常小的一部分能比肩磁盘运行的速度
有一个巨大的限制，所以他们
脑中坚定要
在论文中提到的设计中
避免使用网络
他们使用了一堆技巧
尽一切可能避免在网络上发送东西
他们有一千台机器
那很智能
因此默认情况下此箭头
实际上是读取
本地磁盘，并且不涉及
网络，这取决于
故障或负载或其他
也不可能总是那样做，但几乎所有
和存储数据，从而节省
大量时间
而如果在网络中移动输入，这些时间则是必须要等待的
他们玩的下一个窍门是
在输出存储到机器的本地磁盘之前
不需要网络通信
他不是实时
因为输出存储在了磁盘中
但是我们肯定知道，不管怎样，
为了全部分组
并将其传递给单个调用
在某些机器上生成（数据），这将
需要网络通讯
我们想要获取
所有这些，把他们给到单台
必须在网络上移动的机器
所以这个洗牌
我们实际上需要它们
按列存储在
机器上
这种将行存储的变为
列存储的转换本质上称为
这篇论文称为，洗牌。它确实很需要
在网络上移动的每条数据
还需要它（洗牌），现在它像
你是对的，你可以想象一个不同的
定义，在里面你有更多的
我还没仔细想过这个
当然，至于程序员界面而言
目标
他们的第一目标是否确实是能够
易于编程的
对于只是不知道系统发生了什么的人来说
可能是，你知道的
小缺陷
现在看起来的样子
我不知道它究竟是啥样
或许没这么简单
也许可以用那种方式做
人们对现代事物了解更多
他们确实经常涉及处理
数据流，而不是这些
批处理的方法
从某种意义上说，有一种批处理方法
我们要一直等待所有数据获取完时才能处理
因此，首先，你必须
有一个有限输入的概念
现代系统通常确实可以处理流
也能够
好吧，这就是洗牌的重点
好吧，这就是洗牌的重点
所有的网络路线是哪里发生的
这实际上可能有海量数据
如果你想要排序，如果你在
排序的输出和输入有相同的大小
排序的输出和输入有相同的大小
也就是
你在做排序，你在这里要
这是量非常大的数据
他们确实来自任意的
确实有些，在这些阶段，很大程度上减少数据量
确实有些，在这些阶段，很大程度上减少数据量
有人提到，哦，如果你想把
人们想做的事
像排序或网站一样巨大
会把它们收集起来并写入
另一轮网络通讯
因为你可能
认为他们也许用了相同的技巧
（就是）把输出
拆分数据以提高性能
也为容错保留两三份副本
这意味着无论你
需要什么去写一份数据备份
跨网络连接到其他服务器
有很多网络通信
这儿就有一大堆
而我是这个网络通信
布局是一个很大的限制性因素
很多人们想做的事情
在数据中心，现代数据中心
网络从根本上讲要比过去快很多
所以大家知道
你现在可能会看到的典型的数据中心网络
实际上有很多根
而不是，所有数据要经过的单个根交换机
交换机与每个这种备份根交换机相连
交换机与每个这种备份根交换机相连
流量在根交换机之间分配
现代数据中心网络
具有更大的网络吞吐量
因为，我认为，实际上，现代
但在他们停止使用之前
当数据在存储时
很高兴能从任何地方对数据进行投票
因为他们认为
那样速度非常快，好了，我们
你可以自己在里面编写一些
周四见
